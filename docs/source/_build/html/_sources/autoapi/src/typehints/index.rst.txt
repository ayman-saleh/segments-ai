:py:mod:`src.typehints`
=======================

.. py:module:: src.typehints


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.typehints.LabelStatus
   src.typehints.TaskType
   src.typehints.DataType
   src.typehints.Role
   src.typehints.Status
   src.typehints.ReleaseType
   src.typehints.ImageVectorAnnotationType
   src.typehints.PointcloudAnnotationType
   src.typehints.PCDType
   src.typehints.InputType
   src.typehints.Category
   src.typehints.AuthHeader
   src.typehints.URL
   src.typehints.Release
   src.typehints.PresignedPostFields
   src.typehints.File
   src.typehints.ObjectAttribute
   src.typehints.Annotation
   src.typehints.ImageSegmentationLabelAttributes
   src.typehints._ImageVectorAnnotationBase
   src.typehints.ImageVectorAnnotation
   src.typehints.ImageVectorLabelAttributes
   src.typehints.ImageSequenceVectorAnnotation
   src.typehints.ImageVectorFrame
   src.typehints.ImageSequenceVectorLabelAttributes
   src.typehints.PointcloudSegmentationLabelAttributes
   src.typehints.XYZ
   src.typehints._PointcloudCuboidAnnotationBase
   src.typehints.PointcloudCuboidAnnotation
   src.typehints.PointcloudCuboidLabelAttributes
   src.typehints.PointcloudSequenceSegmentationAnnotation
   src.typehints.PointcloudSegmentationFrame
   src.typehints.PointcloudSequenceSegmentationLabelAttributes
   src.typehints.PointcloudSequenceCuboidAnnotation
   src.typehints.PointcloudSequenceCuboidFrame
   src.typehints.PointcloudSequenceCuboidLabelAttributes
   src.typehints.TextAnnotation
   src.typehints.TextLabelAttributes
   src.typehints.Label
   src.typehints.ImageSampleAttributes
   src.typehints.ImageFrame
   src.typehints.ImageSequenceSampleAttributes
   src.typehints.PCD
   src.typehints.XYZW
   src.typehints.EgoPose
   src.typehints.PointcloudSampleAttributes
   src.typehints.PointcloudSequenceSampleAttributes
   src.typehints.TextSampleAttributes
   src.typehints.Sample
   src.typehints.User
   src.typehints.Collaborator
   src.typehints.TaskAttributeCategory
   src.typehints.TaskAttributes
   src.typehints.Owner
   src.typehints.Statistics
   src.typehints.Labelset
   src.typehints.LabelStats
   src.typehints.Dataset




Attributes
~~~~~~~~~~

.. autoapisummary::

   src.typehints.DACITE_CONFIG
   src.typehints.RGB
   src.typehints.RGBA
   src.typehints.FormatVersion
   src.typehints.AWSFields
   src.typehints.ObjectAttributes
   src.typehints.ImageAttributes
   src.typehints.LabelAttributes
   src.typehints.SampleAttributes


.. py:class:: LabelStatus

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: reviewed
      :annotation: = REVIEWED

      

   .. py:attribute:: reviewing_in_progress
      :annotation: = REVIEWING_IN_PROGRESS

      

   .. py:attribute:: labeled
      :annotation: = LABELED

      

   .. py:attribute:: labeling_in_progress
      :annotation: = LABELING_IN_PROGRESS

      

   .. py:attribute:: rejected
      :annotation: = REJECTED

      

   .. py:attribute:: prelabeled
      :annotation: = PRELABELED

      

   .. py:attribute:: skipped
      :annotation: = SKIPPED

      


.. py:class:: TaskType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: segmentation_bitmap
      :annotation: = segmentation-bitmap

      

   .. py:attribute:: segmentation_bitmap_highres
      :annotation: = segmentation-bitmap-highres

      

   .. py:attribute:: bboxes
      :annotation: = bboxes

      

   .. py:attribute:: vector
      :annotation: = vector

      

   .. py:attribute:: pointcloud_cuboid
      :annotation: = pointcloud-cuboid

      

   .. py:attribute:: pointcloud_cuboid_sequence
      :annotation: = pointcloud-cuboid-sequence

      

   .. py:attribute:: pointcloud_segmentation
      :annotation: = pointcloud-segmentation

      

   .. py:attribute:: pointcloud_segmentation_sequence
      :annotation: = pointcloud-segmentation-sequence

      

   .. py:attribute:: text_named_entities
      :annotation: = text-named-entities

      

   .. py:attribute:: text_span_categorization
      :annotation: = text-span-categorization

      

   .. py:attribute:: image_vector_sequence
      :annotation: = image-vector-sequence

      

   .. py:attribute:: other
      :annotation: = 

      


.. py:class:: DataType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: image
      :annotation: = IMAGE

      


.. py:class:: Role

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: labeler
      :annotation: = labeler

      

   .. py:attribute:: reviewer
      :annotation: = reviewer

      

   .. py:attribute:: admin
      :annotation: = admin

      


.. py:class:: Status

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: pending
      :annotation: = PENDING

      

   .. py:attribute:: succeeded
      :annotation: = SUCCEEDED

      

   .. py:attribute:: failed
      :annotation: = FAILED

      


.. py:class:: ReleaseType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: json
      :annotation: = JSON

      


.. py:class:: ImageVectorAnnotationType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: bbox
      :annotation: = bbox

      

   .. py:attribute:: polygon
      :annotation: = polygon

      

   .. py:attribute:: polyline
      :annotation: = polyline

      

   .. py:attribute:: point
      :annotation: = point

      


.. py:class:: PointcloudAnnotationType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: cuboid
      :annotation: = cuboid

      


.. py:class:: PCDType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: pcd
      :annotation: = pcd

      

   .. py:attribute:: kitti
      :annotation: = kitti

      

   .. py:attribute:: nuscenes
      :annotation: = nuscenes

      


.. py:class:: InputType

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: select
      :annotation: = select

      

   .. py:attribute:: text
      :annotation: = text

      

   .. py:attribute:: number
      :annotation: = number

      

   .. py:attribute:: checkbox
      :annotation: = checkbox

      


.. py:class:: Category

   Bases: :py:obj:`enum.StrEnum`

   .. py:attribute:: street_scenery
      :annotation: = street_scenery

      

   .. py:attribute:: garden
      :annotation: = garden

      

   .. py:attribute:: agriculture
      :annotation: = agriculture

      

   .. py:attribute:: satellite
      :annotation: = satellite

      

   .. py:attribute:: people
      :annotation: = people

      

   .. py:attribute:: medical
      :annotation: = medical

      

   .. py:attribute:: other
      :annotation: = other

      


.. py:data:: DACITE_CONFIG
   

   

.. py:data:: RGB
   

   

.. py:data:: RGBA
   

   

.. py:data:: FormatVersion
   

   

.. py:class:: AuthHeader

   Bases: :py:obj:`typing_extensions.TypedDict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   .. py:attribute:: Authorization
      :annotation: :str

      


.. py:class:: URL

   .. py:attribute:: url
      :annotation: :Optional[str]

      


.. py:class:: Release

   .. py:attribute:: uuid
      :annotation: :str

      

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: description
      :annotation: :str

      

   .. py:attribute:: release_type
      :annotation: :ReleaseType

      

   .. py:attribute:: attributes
      :annotation: :URL

      

   .. py:attribute:: status
      :annotation: :Status

      

   .. py:attribute:: status_info
      :annotation: :str

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: samples_count
      :annotation: :int

      


.. py:data:: AWSFields
   

   

.. py:class:: PresignedPostFields

   .. py:attribute:: url
      :annotation: :str

      

   .. py:attribute:: fields
      :annotation: :AWSFields

      


.. py:class:: File

   .. py:attribute:: uuid
      :annotation: :str

      

   .. py:attribute:: filename
      :annotation: :str

      

   .. py:attribute:: url
      :annotation: :str

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: presignedPostFields
      :annotation: :PresignedPostFields

      


.. py:class:: ObjectAttribute

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: input_type
      :annotation: :InputType

      

   .. py:attribute:: default_value
      :annotation: :Optional[Union[str, float, bool]]

      

   .. py:attribute:: values
      :annotation: :Optional[List[str]]

      

   .. py:attribute:: min
      :annotation: :Optional[float]

      

   .. py:attribute:: max
      :annotation: :Optional[float]

      

   .. py:attribute:: step
      :annotation: :Optional[float]

      

   .. py:method:: __post_init__(self)



.. py:data:: ObjectAttributes
   

   

.. py:data:: ImageAttributes
   

   

.. py:class:: Annotation

   .. py:attribute:: id
      :annotation: :int

      

   .. py:attribute:: category_id
      :annotation: :int

      

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: ImageSegmentationLabelAttributes

   .. py:attribute:: annotations
      :annotation: :List[Annotation]

      

   .. py:attribute:: segmentation_bitmap
      :annotation: :URL

      

   .. py:attribute:: image_attributes
      :annotation: :Optional[ImageAttributes]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: _ImageVectorAnnotationBase

   .. py:attribute:: id
      :annotation: :int

      

   .. py:attribute:: category_id
      :annotation: :int

      

   .. py:attribute:: points
      :annotation: :List[List[float]]

      

   .. py:attribute:: type
      :annotation: :ImageVectorAnnotationType

      


.. py:class:: ImageVectorAnnotation

   Bases: :py:obj:`_ImageVectorAnnotationBase`

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: ImageVectorLabelAttributes

   .. py:attribute:: annotations
      :annotation: :List[ImageVectorAnnotation]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      

   .. py:attribute:: image_attributes
      :annotation: :Optional[ImageAttributes]

      


.. py:class:: ImageSequenceVectorAnnotation

   Bases: :py:obj:`_ImageVectorAnnotationBase`

   .. py:attribute:: track_id
      :annotation: :int

      

   .. py:attribute:: is_keyframe
      :annotation: :bool = False

      

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: ImageVectorFrame

   .. py:attribute:: annotations
      :annotation: :List[ImageSequenceVectorAnnotation]

      

   .. py:attribute:: timestamp
      :annotation: :Optional[int]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      

   .. py:attribute:: image_attributes
      :annotation: :Optional[ImageAttributes]

      


.. py:class:: ImageSequenceVectorLabelAttributes

   .. py:attribute:: frames
      :annotation: :List[ImageVectorFrame]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: PointcloudSegmentationLabelAttributes

   .. py:attribute:: annotations
      :annotation: :List[Annotation]

      

   .. py:attribute:: point_annotations
      :annotation: :List[int]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: XYZ

   .. py:attribute:: x
      :annotation: :float

      

   .. py:attribute:: y
      :annotation: :float

      

   .. py:attribute:: z
      :annotation: :float

      


.. py:class:: _PointcloudCuboidAnnotationBase

   .. py:attribute:: id
      :annotation: :int

      

   .. py:attribute:: category_id
      :annotation: :int

      

   .. py:attribute:: position
      :annotation: :XYZ

      

   .. py:attribute:: dimensions
      :annotation: :XYZ

      

   .. py:attribute:: yaw
      :annotation: :float

      

   .. py:attribute:: type
      :annotation: :PointcloudAnnotationType

      


.. py:class:: PointcloudCuboidAnnotation

   Bases: :py:obj:`_PointcloudCuboidAnnotationBase`

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: PointcloudCuboidLabelAttributes

   .. py:attribute:: annotations
      :annotation: :List[PointcloudCuboidAnnotation]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: PointcloudSequenceSegmentationAnnotation

   .. py:attribute:: id
      :annotation: :int

      

   .. py:attribute:: category_id
      :annotation: :int

      

   .. py:attribute:: track_id
      :annotation: :int

      

   .. py:attribute:: is_keyframe
      :annotation: :bool = False

      

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: PointcloudSegmentationFrame

   .. py:attribute:: annotations
      :annotation: :List[PointcloudSequenceSegmentationAnnotation]

      

   .. py:attribute:: point_annotations
      :annotation: :Optional[List[int]]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: PointcloudSequenceSegmentationLabelAttributes

   .. py:attribute:: frames
      :annotation: :List[PointcloudSegmentationFrame]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: PointcloudSequenceCuboidAnnotation

   Bases: :py:obj:`_PointcloudCuboidAnnotationBase`

   .. py:attribute:: track_id
      :annotation: :int

      

   .. py:attribute:: is_keyframe
      :annotation: :bool = False

      

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      


.. py:class:: PointcloudSequenceCuboidFrame

   .. py:attribute:: timestamp
      :annotation: :int

      

   .. py:attribute:: annotations
      :annotation: :List[PointcloudSequenceCuboidAnnotation]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: PointcloudSequenceCuboidLabelAttributes

   .. py:attribute:: frames
      :annotation: :List[PointcloudSequenceCuboidFrame]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:class:: TextAnnotation

   .. py:attribute:: start
      :annotation: :int

      

   .. py:attribute:: end
      :annotation: :int

      

   .. py:attribute:: category_id
      :annotation: :int

      


.. py:class:: TextLabelAttributes

   .. py:attribute:: annotations
      :annotation: :List[TextAnnotation]

      

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      


.. py:data:: LabelAttributes
   

   

.. py:class:: Label

   .. py:attribute:: sample_uuid
      :annotation: :str

      

   .. py:attribute:: label_type
      :annotation: :TaskType

      

   .. py:attribute:: label_status
      :annotation: :LabelStatus

      

   .. py:attribute:: attributes
      :annotation: :LabelAttributes

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: created_by
      :annotation: :str

      

   .. py:attribute:: updated_at
      :annotation: :str

      

   .. py:attribute:: score
      :annotation: :Optional[float]

      

   .. py:attribute:: rating
      :annotation: :Optional[float]

      

   .. py:attribute:: reviewed_at
      :annotation: :Optional[str]

      

   .. py:attribute:: reviewed_by
      :annotation: :Optional[str]

      


.. py:class:: ImageSampleAttributes

   .. py:attribute:: image
      :annotation: :URL

      


.. py:class:: ImageFrame

   Bases: :py:obj:`ImageSampleAttributes`

   .. py:attribute:: name
      :annotation: :Optional[str]

      


.. py:class:: ImageSequenceSampleAttributes

   .. py:attribute:: frames
      :annotation: :List[ImageFrame]

      


.. py:class:: PCD

   .. py:attribute:: url
      :annotation: :str

      

   .. py:attribute:: type
      :annotation: :PCDType = pcd

      


.. py:class:: XYZW

   .. py:attribute:: qx
      :annotation: :float

      

   .. py:attribute:: qy
      :annotation: :float

      

   .. py:attribute:: qz
      :annotation: :float

      

   .. py:attribute:: qw
      :annotation: :float

      


.. py:class:: EgoPose

   .. py:attribute:: position
      :annotation: :XYZ

      

   .. py:attribute:: heading
      :annotation: :XYZW

      


.. py:class:: PointcloudSampleAttributes

   .. py:attribute:: pcd
      :annotation: :PCD

      

   .. py:attribute:: ego_pose
      :annotation: :Optional[EgoPose]

      

   .. py:attribute:: default_z
      :annotation: :Optional[float]

      

   .. py:attribute:: name
      :annotation: :Optional[str]

      

   .. py:attribute:: timestamp
      :annotation: :Optional[int]

      


.. py:class:: PointcloudSequenceSampleAttributes

   .. py:attribute:: frames
      :annotation: :List[PointcloudSampleAttributes]

      


.. py:class:: TextSampleAttributes

   .. py:attribute:: text
      :annotation: :str

      


.. py:data:: SampleAttributes
   

   

.. py:class:: Sample

   .. py:attribute:: uuid
      :annotation: :str

      

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: attributes
      :annotation: :SampleAttributes

      

   .. py:attribute:: metadata
      :annotation: :Dict[str, Any]

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: created_by
      :annotation: :str

      

   .. py:attribute:: comments
      :annotation: :List[str]

      

   .. py:attribute:: priority
      :annotation: :float

      

   .. py:attribute:: has_embedding
      :annotation: :bool

      


.. py:class:: User

   .. py:attribute:: username
      :annotation: :str

      

   .. py:attribute:: created_at
      :annotation: :str

      


.. py:class:: Collaborator

   .. py:attribute:: user
      :annotation: :User

      

   .. py:attribute:: role
      :annotation: :Role

      


.. py:class:: TaskAttributeCategory

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: id
      :annotation: :int

      

   .. py:attribute:: color
      :annotation: :Optional[Union[RGB, RGBA]]

      

   .. py:attribute:: attributes
      :annotation: :Optional[ObjectAttributes]

      

   .. py:attribute:: dimensions
      :annotation: :Optional[XYZ]

      


.. py:class:: TaskAttributes

   .. py:attribute:: format_version
      :annotation: :Optional[FormatVersion]

      

   .. py:attribute:: categories
      :annotation: :Optional[List[TaskAttributeCategory]]

      


.. py:class:: Owner

   .. py:attribute:: username
      :annotation: :str

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: email
      :annotation: :Optional[str]

      


.. py:class:: Statistics

   .. py:attribute:: prelabeled_count
      :annotation: :int

      

   .. py:attribute:: labeled_count
      :annotation: :int

      

   .. py:attribute:: reviewed_count
      :annotation: :int

      

   .. py:attribute:: rejected_count
      :annotation: :int

      

   .. py:attribute:: skipped_count
      :annotation: :int

      

   .. py:attribute:: samples_count
      :annotation: :int

      


.. py:class:: Labelset

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: description
      :annotation: :str

      

   .. py:attribute:: uuid
      :annotation: :Optional[str]

      

   .. py:attribute:: readme
      :annotation: :Optional[str]

      

   .. py:attribute:: task_type
      :annotation: :Optional[TaskType]

      

   .. py:attribute:: attributes
      :annotation: :Optional[Union[str, TaskAttributes]]

      

   .. py:attribute:: is_groundtruth
      :annotation: :Optional[bool]

      

   .. py:attribute:: statistics
      :annotation: :Optional[Statistics]

      

   .. py:attribute:: created_at
      :annotation: :Optional[str]

      

   .. py:attribute:: stats
      :annotation: :Optional[Dict[str, Any]]

      


.. py:class:: LabelStats

   .. py:attribute:: TOTAL
      :annotation: :Optional[int]

      

   .. py:attribute:: LABELED
      :annotation: :Optional[int]

      

   .. py:attribute:: UNLABELED
      :annotation: :Optional[int]

      

   .. py:attribute:: PRELABELED
      :annotation: :Optional[int]

      


.. py:class:: Dataset

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: description
      :annotation: :str

      

   .. py:attribute:: data_type
      :annotation: :DataType

      

   .. py:attribute:: category
      :annotation: :Category

      

   .. py:attribute:: public
      :annotation: :bool

      

   .. py:attribute:: owner
      :annotation: :Owner

      

   .. py:attribute:: created_at
      :annotation: :str

      

   .. py:attribute:: enable_ratings
      :annotation: :bool

      

   .. py:attribute:: enable_skip_labeling
      :annotation: :bool

      

   .. py:attribute:: enable_skip_reviewing
      :annotation: :bool

      

   .. py:attribute:: enable_save_button
      :annotation: :bool

      

   .. py:attribute:: task_type
      :annotation: :TaskType

      

   .. py:attribute:: task_readme
      :annotation: :str

      

   .. py:attribute:: label_stats
      :annotation: :LabelStats

      

   .. py:attribute:: samples_count
      :annotation: :Optional[Union[str, int]]

      

   .. py:attribute:: collaborators_count
      :annotation: :Optional[int]

      

   .. py:attribute:: cloned_from
      :annotation: :Optional[int]

      

   .. py:attribute:: task_attributes
      :annotation: :Optional[TaskAttributes]

      

   .. py:attribute:: labelsets
      :annotation: :Optional[List[Labelset]]

      

   .. py:attribute:: role
      :annotation: :Optional[str]

      

   .. py:attribute:: readme
      :annotation: :Optional[str]

      

   .. py:attribute:: noncollaborator_can_label
      :annotation: :Optional[bool]

      

   .. py:attribute:: noncollaborator_can_review
      :annotation: :Optional[bool]

      

   .. py:attribute:: tasks
      :annotation: :Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: embeddings_enabled
      :annotation: :Optional[bool]

      


