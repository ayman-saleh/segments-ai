:py:mod:`src.client`
====================

.. py:module:: src.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.client.SegmentsClient




.. py:class:: SegmentsClient(api_key, api_url = 'https://api.segments.ai/')

   SegmentsClient class.

   :param api_key: Your Segments.ai API key.
   :param api_url: URL of the Segments.ai API.

   .. attribute:: api_key

      Your Segments.ai API key.

   .. attribute:: api_url

      URL of the Segments.ai API.

   .. py:method:: close(self)


   .. py:method:: get_datasets(self, user = None)

      Get a list of datasets.

      :param user: The user for which to get the datasets. Leave empty to get datasets of current user. Defaults to None.

      :returns: A list of dataclasses representing the datasets.


   .. py:method:: get_dataset(self, dataset_identifier)

      Get a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.

      :returns: a dataclass representing the dataset.
      :rtype: Dataset


   .. py:method:: add_dataset(self, name, description = '', task_type = 'segmentation-bitmap', task_attributes = None, category = 'other', public = False, readme = '', enable_skip_labeling = True, enable_skip_reviewing = False, enable_ratings = False)

      Add a dataset.

      :param name: The dataset name. Example: flowers.
      :param description: The dataset description. Defaults to ''.
      :param task_type: The dataset's task type. One of 'segmentation-bitmap', 'segmentation-bitmap-highres', 'vector', 'bboxes', 'keypoints'. Defaults to 'segmentation-bitmap', 'pointcloud-segmentation', 'pointcloud-detection'.
      :param task_attributes: The dataset's task attributes. Defaults to None.
      :param category: The dataset category. Defaults to 'other'.
      :param public: The dataset visibility. Defaults to False.
      :param readme: The dataset readme. Defaults to ''.
      :param enable_skip_labeling: Enable the skip button in the labeling workflow. Defaults to True.
      :param enable_skip_reviewing: Enable the skip button in the reviewing workflow. Defaults to False.
      :param enable_ratings: Enable star-ratings for labeled images. Defaults to False.

      :returns: A dataclass representing the newly created dataset.


   .. py:method:: update_dataset(self, dataset_identifier, description = None, task_type = None, task_attributes = None, category = None, public = None, readme = None, enable_skip_labeling = None, enable_skip_reviewing = None, enable_ratings = None)

      Update a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param description: The dataset description.
      :param task_type: The dataset's task type. One of 'segmentation-bitmap', 'segmentation-bitmap-highres', 'vector', 'bboxes', 'keypoints', 'pointcloud-segmentation', 'pointcloud-detection'.
      :param task_attributes: The dataset's task attributes.
      :param category: The dataset category.
      :param public: The dataset visibility.
      :param readme: The dataset readme.
      :param enable_skip_labeling: Enable the skip button in the labeling workflow.
      :param enable_skip_reviewing: Enable the skip button in the reviewing workflow.
      :param enable_ratings: Enable star-ratings for labeled images.

      :returns: A dataclass representing the updated dataset.


   .. py:method:: delete_dataset(self, dataset_identifier)

      Delete a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.


   .. py:method:: add_dataset_collaborator(self, dataset_identifier, username, role = 'labeler')

      Add a collaborator to a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param username: The username of the collaborator to be added.
      :param role: The role of the collaborator to be added. One of labeler, reviewer, admin. Defaults to labeler.

      :returns: A dataclass containing the newly added collaborator with its role.


   .. py:method:: delete_dataset_collaborator(self, dataset_identifier, username)

      Delete a dataset collaborator.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param username: The username of the collaborator to be deleted.


   .. py:method:: get_samples(self, dataset_identifier, name = None, label_status = None, metadata = None, sort = 'name', direction = 'asc', per_page = 1000, page = 1)

      Get the samples in a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: Name to filter by. Defaults to None (no filtering).
      :param label_status: List of label statuses to filter by. Defaults to None (no filtering).
      :param metadata: List of 'key:value' metadata attributes to filter by. Defaults to None (no filtering).
      :param sort: What to sort results by. One of 'name', 'created', 'priority'. Defaults to 'name'.
      :param direction: Sorting direction. One of 'asc' (ascending) or 'desc' (descending). Defaults to 'asc'.
      :param per_page: Pagination parameter indicating the maximum number of samples to return. Defaults to 1000.
      :param page: Pagination parameter indicating the page to return. Defaults to 1.

      :returns: A list of dataclasses representing the samples.


   .. py:method:: get_sample(self, uuid, labelset = None)

      Get a sample.

      :param uuid: The sample uuid.
      :param labelset: If defined, this additionally returns the label for the given labelset. Defaults to None.

      :returns: A dataclass representing the sample


   .. py:method:: add_sample(self, dataset_identifier, name, attributes, metadata = None, priority = 0, embedding = None)

      Add a sample to a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the sample.
      :param attributes: The sample attributes. Please refer to the online documentation.
      :param metadata: Any sample metadata. Example: {'weather': 'sunny', 'camera_id': 3}.
      :param priority: Priority in the labeling queue. Samples with higher values will be labeled first. Defaults to 0.
      :param embedding: Embedding of this sample represented by an array of floats.

      :returns: A dataclass representing the newly created sample.


   .. py:method:: update_sample(self, uuid, name = None, attributes = None, metadata = None, priority = 0, embedding = None)

      Update a sample.

      :param uuid: The sample uuid.
      :param name: The name of the sample.
      :param attributes: The sample attributes. Please refer to the online documentation.
      :param metadata: Any sample metadata. Example: {'weather': 'sunny', 'camera_id': 3}.
      :param priority: Priority in the labeling queue. Samples with higher values will be labeled first. Default is 0.
      :param embedding: Embedding of this sample represented by an array of floats.

      :returns: A dataclass representing the updated sample.


   .. py:method:: delete_sample(self, uuid)

      Delete a sample.

      :param uuid: The sample uuid.


   .. py:method:: get_label(self, sample_uuid, labelset = 'ground-truth')

      Get a label.

      :param sample_uuid: The sample uuid.
      :param labelset: The labelset this label belongs to. Defaults to 'ground-truth'.

      :returns: A dataclass representing the label.


   .. py:method:: add_label(self, sample_uuid, labelset, attributes, label_status = 'PRELABELED', score = None)

      Add a label to a sample.

      :param sample_uuid: The sample uuid.
      :param labelset: The labelset this label belongs to.
      :param attributes: The label attributes. Please refer to the online documentation.
      :param label_status: The label status. Defaults to 'PRELABELED'.
      :param score: The label score. Defaults to None.

      :returns: A dataclass representing the newly created label.


   .. py:method:: update_label(self, sample_uuid, labelset, attributes, label_status = 'PRELABELED', score = None)

      Update a label.

      :param sample_uuid: The sample uuid.
      :param labelset: The labelset this label belongs to.
      :param attributes: The label attributes. Please refer to the online documentation.
      :param label_status: The label status. Defaults to 'PRELABELED'.
      :param score: The label score. Defaults to None.

      :returns: A dataclass representing the updated label.


   .. py:method:: delete_label(self, sample_uuid, labelset)

      Delete a label.

      :param sample_uuid: The sample uuid.
      :param labelset: The labelset this label belongs to.


   .. py:method:: get_labelsets(self, dataset_identifier)

      Get the labelsets in a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.

      :returns: A list of dataclasses representing the labelsets.


   .. py:method:: get_labelset(self, dataset_identifier, name)

      Get a labelset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the labelset.

      :returns: A dataclass representing the labelset.


   .. py:method:: add_labelset(self, dataset_identifier, name, description = '')

      Add a labelset to a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the labelset.
      :param description: The labelset description.

      :returns: A dataclass representing the labelset.


   .. py:method:: delete_labelset(self, dataset_identifier, name)

      Delete a labelset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the labelset.


   .. py:method:: get_releases(self, dataset_identifier)

      Get the releases in a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.

      :returns: A list of dataclasses representing the releases.


   .. py:method:: get_release(self, dataset_identifier, name)

      Get a release.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the release.

      :returns: A dataclass representing the release.


   .. py:method:: add_release(self, dataset_identifier, name, description = '')

      Add a release to a dataset.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the release.
      :param description: The release description.

      :returns: A dataclass representing the newly created release.


   .. py:method:: delete_release(self, dataset_identifier, name)

      Delete a release.

      :param dataset_identifier: The dataset identifier, consisting of the name of the dataset owner followed by the name of the dataset itself. Example: jane/flowers.
      :param name: The name of the release.


   .. py:method:: upload_asset(self, file, filename = 'label.png')

      Upload an asset.

      :param file: A file object.
      :param filename: The file name. Defaults to label.png.

      :returns: A dataclass representing the uploaded file.


   .. py:method:: _get_auth_header(self)


   .. py:method:: get(self, endpoint, auth = True)


   .. py:method:: post(self, endpoint, data = None, auth = True)


   .. py:method:: put(self, endpoint, data = None, auth = True)


   .. py:method:: patch(self, endpoint, data = None, auth = True)


   .. py:method:: delete(self, endpoint, data = None, auth = True)


   .. py:method:: _upload_to_aws(self, file, url, aws_fields)



